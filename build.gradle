buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

//apply from: rootProject.file('common.gradle')

subprojects {
    apply from: rootProject.file('common.gradle')
}

version = '1.14.4-5.0.0'
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = 'com.blamejared.crafttweaker'
archivesBaseName = 'CraftTweaker'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'


            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
}

def zenCodeDeps = [ ':CodeFormatter', ':CodeFormatterShared', ':JavaIntegration', ':JavaAnnotations', ':JavaBytecodeCompiler', ':JavaShared', ':Validator', ':Parser', ':CodeModel', ':Shared']


dependencies {

    zenCodeDeps.collect { compile project(it) }

    minecraft 'net.minecraftforge:forge:1.14.4-28.1.6'
    compile fg.deobf("mezz.jei:jei-1.14.4:6.0.0.11");
}

jar {
    dependsOn zenCodeDeps.collect { it + ":compileJava" }
    from files(zenCodeDeps.collect { project(it).sourceSets.main.output })

    manifest {
        attributes([
                "Specification-Title"     : "crafttweaker",
                "Specification-Vendor"    : "CraftTweaker",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "CraftTweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    from files(zenCodeDeps.collect { project(it).sourceSets.main.allSource })
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    from files(zenCodeDeps.collect { project(it).javadoc.destinationDir })
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    from files(zenCodeDeps.collect { project(it).sourceSets.main.output })
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {
            
                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->    
                
                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {

                classifier 'sources'
            }
            artifact javadocJar {

                classifier 'javadoc'
            }
            artifact deobfJar {

                classifier 'deobf'
            }
        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}